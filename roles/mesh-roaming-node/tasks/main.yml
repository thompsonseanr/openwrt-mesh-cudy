# SPDX-License-Identifier: MIT-0
---
# tasks file for mesh-roaming-node
- name: Openwrt mesh-roaming configuration
  become: true
  become_user: root
  delegate_to: localhost
  block:
    - name: Configure LAN IP
      ansible.builtin.shell: |
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' '
        uci batch <<EOF
        set network.lan.proto="static"
        set network.lan.ipaddr="{{ inventory_hostname }}"
        set network.lan.netmask="255.255.255.0"
        set network.lan.gateway="192.168.1.1"
        set network.lan.dns="192.168.1.1"
        commit network
        EOF'

    - name: Setup bat0 interface
      ansible.builtin.shell: |
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' '
        uci batch <<EOF
        set network.bat0="interface"
        set network.bat0.proto="batadv"
        set network.bat0.routing_algo="BATMAN_V"
        set network.bat0.bridge_loop_avoidance="1"
        set network.bat0.gw_mode="client"
        set network.bat0.hop_penalty="30"
        commit network
        EOF'

    - name: Setup batmesh interface
      ansible.builtin.shell: |
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' '
        uci batch <<EOF
        set network.batmesh="interface"
        set network.batmesh.proto="batadv_hardif"
        set network.batmesh.master="bat0"
        commit network
        EOF'

    - name: bridge eth0 to bat0
      ansible.builtin.shell: |
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' '
        uci add_list network.@device[0].ports="bat0"
        uci commit network'

    - name: Configure 5g radio (radio1)
      ansible.builtin.shell: |
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' '
        uci batch <<EOF
        set wireless.radio1.band="5g"
        set wireless.radio1.channel="149"
        set wireless.radio1.hwmode="11a"
        set wireless.radio1.htmode="VHT80"
        set wireless.radio1.cell_density="0"
        set wireless.radio1.disabled="0"
        set wireless.radio1.country="US"
        commit wireless
        EOF'

    - name: Configure 2g radio (radio0)
      ansible.builtin.shell: |
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' '
        uci batch <<EOF
        set wireless.radio0.band="2g"
        set wireless.radio0.channel="6"
        set wireless.radio0.hwmode="11g"
        set wireless.radio0.htmode="HT20"
        set wireless.radio0.disabled="0"
        set wireless.radio0.country="US"
        commit wireless
        EOF'

    - name: Create 5g mesh interface on radio1
      ansible.builtin.shell: |
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' '
        uci batch <<EOF
        set wireless.mesh5="wifi-iface"
        set wireless.mesh5.device="radio1"
        set wireless.mesh5.network="batmesh"
        set wireless.mesh5.mode="mesh"
        set wireless.mesh5.encryption="sae"
        set wireless.mesh5.mesh_id="meshparty"
        set wireless.mesh5.mesh_fwding="0"
        set wireless.mesh5.mesh_rssi_threshold="0"
        set wireless.mesh5.key="{{ meshApPass }}"
        commit wireless
        EOF'

    - name: Create 5g AP with WPA3 roaming on radio1
      ansible.builtin.shell: |
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' '
        uci batch <<EOF
        set wireless.ap5="wifi-iface"
        set wireless.ap5.device="radio1"
        set wireless.ap5.mode="ap"
        set wireless.ap5.ssid="stayclassy5g"
        set wireless.ap5.encryption="sae"
        set wireless.ap5.key="{{ meshApPass }}"
        set wireless.ap5.network="lan"
        set wireless.ap5.ieee80211r="1"
        set wireless.ap5.mobility_domain="4f57"
        set wireless.ap5.ft_over_ds="1"
        set wireless.ap5.ft_psk_generate_local="1"
        set wireless.ap5.ieee80211k="1"
        set wireless.ap5.ieee80211v="1"
        set wireless.ap5.bss_transition="1"
        commit wireless
        EOF'

    - name: Create 2g AP with WPA3 roaming on radio0
      ansible.builtin.shell: |
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' '
        uci batch <<EOF
        set wireless.ap2="wifi-iface"
        set wireless.ap2.device="radio0"
        set wireless.ap2.mode="ap"
        set wireless.ap2.ssid="stayclassy"
        set wireless.ap2.encryption="sae"
        set wireless.ap2.key="{{ meshApPass }}"
        set wireless.ap2.network="lan"
        set wireless.ap2.ieee80211r="1"
        set wireless.ap2.mobility_domain="4f57"
        set wireless.ap2.ft_over_ds="1"
        set wireless.ap2.ft_psk_generate_local="1"
        set wireless.ap2.ieee80211k="1"
        set wireless.ap2.ieee80211v="1"
        set wireless.ap2.bss_transition="1"
        commit wireless
        EOF'

    - name: Commit changes
      ansible.builtin.shell: |
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' '
        uci commit network
        uci commit wireless'

    - name: Restart network
      ansible.builtin.shell: >
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' '/etc/init.d/network restart'

    - name: Reload wifi
      ansible.builtin.shell: >
        sshpass -p '{{ openWrtPass }}' ssh -o StrictHostKeyChecking=no '{{ openWrtUser }}@{{ inventory_hostname }}' 'wifi reload'
